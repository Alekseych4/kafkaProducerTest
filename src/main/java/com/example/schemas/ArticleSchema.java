/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ArticleSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1027894692908365994L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ArticleSchema\",\"namespace\":\"com.example.schemas\",\"fields\":[{\"name\":\"uniqueArticleName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"writerNickname\",\"type\":\"string\"},{\"name\":\"articleTitle\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ArticleSchema> ENCODER =
      new BinaryMessageEncoder<ArticleSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ArticleSchema> DECODER =
      new BinaryMessageDecoder<ArticleSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ArticleSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ArticleSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ArticleSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ArticleSchema>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ArticleSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ArticleSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ArticleSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ArticleSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence uniqueArticleName;
  private java.lang.CharSequence writerNickname;
  private java.lang.CharSequence articleTitle;
  private java.lang.CharSequence text;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ArticleSchema() {}

  /**
   * All-args constructor.
   * @param uniqueArticleName The new value for uniqueArticleName
   * @param writerNickname The new value for writerNickname
   * @param articleTitle The new value for articleTitle
   * @param text The new value for text
   */
  public ArticleSchema(java.lang.CharSequence uniqueArticleName, java.lang.CharSequence writerNickname, java.lang.CharSequence articleTitle, java.lang.CharSequence text) {
    this.uniqueArticleName = uniqueArticleName;
    this.writerNickname = writerNickname;
    this.articleTitle = articleTitle;
    this.text = text;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uniqueArticleName;
    case 1: return writerNickname;
    case 2: return articleTitle;
    case 3: return text;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uniqueArticleName = (java.lang.CharSequence)value$; break;
    case 1: writerNickname = (java.lang.CharSequence)value$; break;
    case 2: articleTitle = (java.lang.CharSequence)value$; break;
    case 3: text = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uniqueArticleName' field.
   * @return The value of the 'uniqueArticleName' field.
   */
  public java.lang.CharSequence getUniqueArticleName() {
    return uniqueArticleName;
  }


  /**
   * Sets the value of the 'uniqueArticleName' field.
   * @param value the value to set.
   */
  public void setUniqueArticleName(java.lang.CharSequence value) {
    this.uniqueArticleName = value;
  }

  /**
   * Gets the value of the 'writerNickname' field.
   * @return The value of the 'writerNickname' field.
   */
  public java.lang.CharSequence getWriterNickname() {
    return writerNickname;
  }


  /**
   * Sets the value of the 'writerNickname' field.
   * @param value the value to set.
   */
  public void setWriterNickname(java.lang.CharSequence value) {
    this.writerNickname = value;
  }

  /**
   * Gets the value of the 'articleTitle' field.
   * @return The value of the 'articleTitle' field.
   */
  public java.lang.CharSequence getArticleTitle() {
    return articleTitle;
  }


  /**
   * Sets the value of the 'articleTitle' field.
   * @param value the value to set.
   */
  public void setArticleTitle(java.lang.CharSequence value) {
    this.articleTitle = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }


  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Creates a new ArticleSchema RecordBuilder.
   * @return A new ArticleSchema RecordBuilder
   */
  public static com.example.schemas.ArticleSchema.Builder newBuilder() {
    return new com.example.schemas.ArticleSchema.Builder();
  }

  /**
   * Creates a new ArticleSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ArticleSchema RecordBuilder
   */
  public static com.example.schemas.ArticleSchema.Builder newBuilder(com.example.schemas.ArticleSchema.Builder other) {
    if (other == null) {
      return new com.example.schemas.ArticleSchema.Builder();
    } else {
      return new com.example.schemas.ArticleSchema.Builder(other);
    }
  }

  /**
   * Creates a new ArticleSchema RecordBuilder by copying an existing ArticleSchema instance.
   * @param other The existing instance to copy.
   * @return A new ArticleSchema RecordBuilder
   */
  public static com.example.schemas.ArticleSchema.Builder newBuilder(com.example.schemas.ArticleSchema other) {
    if (other == null) {
      return new com.example.schemas.ArticleSchema.Builder();
    } else {
      return new com.example.schemas.ArticleSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for ArticleSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ArticleSchema>
    implements org.apache.avro.data.RecordBuilder<ArticleSchema> {

    private java.lang.CharSequence uniqueArticleName;
    private java.lang.CharSequence writerNickname;
    private java.lang.CharSequence articleTitle;
    private java.lang.CharSequence text;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.schemas.ArticleSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uniqueArticleName)) {
        this.uniqueArticleName = data().deepCopy(fields()[0].schema(), other.uniqueArticleName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.writerNickname)) {
        this.writerNickname = data().deepCopy(fields()[1].schema(), other.writerNickname);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.articleTitle)) {
        this.articleTitle = data().deepCopy(fields()[2].schema(), other.articleTitle);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.text)) {
        this.text = data().deepCopy(fields()[3].schema(), other.text);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing ArticleSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.schemas.ArticleSchema other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uniqueArticleName)) {
        this.uniqueArticleName = data().deepCopy(fields()[0].schema(), other.uniqueArticleName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.writerNickname)) {
        this.writerNickname = data().deepCopy(fields()[1].schema(), other.writerNickname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.articleTitle)) {
        this.articleTitle = data().deepCopy(fields()[2].schema(), other.articleTitle);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.text)) {
        this.text = data().deepCopy(fields()[3].schema(), other.text);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'uniqueArticleName' field.
      * @return The value.
      */
    public java.lang.CharSequence getUniqueArticleName() {
      return uniqueArticleName;
    }


    /**
      * Sets the value of the 'uniqueArticleName' field.
      * @param value The value of 'uniqueArticleName'.
      * @return This builder.
      */
    public com.example.schemas.ArticleSchema.Builder setUniqueArticleName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uniqueArticleName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uniqueArticleName' field has been set.
      * @return True if the 'uniqueArticleName' field has been set, false otherwise.
      */
    public boolean hasUniqueArticleName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uniqueArticleName' field.
      * @return This builder.
      */
    public com.example.schemas.ArticleSchema.Builder clearUniqueArticleName() {
      uniqueArticleName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'writerNickname' field.
      * @return The value.
      */
    public java.lang.CharSequence getWriterNickname() {
      return writerNickname;
    }


    /**
      * Sets the value of the 'writerNickname' field.
      * @param value The value of 'writerNickname'.
      * @return This builder.
      */
    public com.example.schemas.ArticleSchema.Builder setWriterNickname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.writerNickname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'writerNickname' field has been set.
      * @return True if the 'writerNickname' field has been set, false otherwise.
      */
    public boolean hasWriterNickname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'writerNickname' field.
      * @return This builder.
      */
    public com.example.schemas.ArticleSchema.Builder clearWriterNickname() {
      writerNickname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'articleTitle' field.
      * @return The value.
      */
    public java.lang.CharSequence getArticleTitle() {
      return articleTitle;
    }


    /**
      * Sets the value of the 'articleTitle' field.
      * @param value The value of 'articleTitle'.
      * @return This builder.
      */
    public com.example.schemas.ArticleSchema.Builder setArticleTitle(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.articleTitle = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'articleTitle' field has been set.
      * @return True if the 'articleTitle' field has been set, false otherwise.
      */
    public boolean hasArticleTitle() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'articleTitle' field.
      * @return This builder.
      */
    public com.example.schemas.ArticleSchema.Builder clearArticleTitle() {
      articleTitle = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return text;
    }


    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public com.example.schemas.ArticleSchema.Builder setText(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.text = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public com.example.schemas.ArticleSchema.Builder clearText() {
      text = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ArticleSchema build() {
      try {
        ArticleSchema record = new ArticleSchema();
        record.uniqueArticleName = fieldSetFlags()[0] ? this.uniqueArticleName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.writerNickname = fieldSetFlags()[1] ? this.writerNickname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.articleTitle = fieldSetFlags()[2] ? this.articleTitle : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.text = fieldSetFlags()[3] ? this.text : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ArticleSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<ArticleSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ArticleSchema>
    READER$ = (org.apache.avro.io.DatumReader<ArticleSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.uniqueArticleName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uniqueArticleName);
    }

    out.writeString(this.writerNickname);

    if (this.articleTitle == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.articleTitle);
    }

    if (this.text == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.text);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.uniqueArticleName = null;
      } else {
        this.uniqueArticleName = in.readString(this.uniqueArticleName instanceof Utf8 ? (Utf8)this.uniqueArticleName : null);
      }

      this.writerNickname = in.readString(this.writerNickname instanceof Utf8 ? (Utf8)this.writerNickname : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.articleTitle = null;
      } else {
        this.articleTitle = in.readString(this.articleTitle instanceof Utf8 ? (Utf8)this.articleTitle : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.text = null;
      } else {
        this.text = in.readString(this.text instanceof Utf8 ? (Utf8)this.text : null);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uniqueArticleName = null;
          } else {
            this.uniqueArticleName = in.readString(this.uniqueArticleName instanceof Utf8 ? (Utf8)this.uniqueArticleName : null);
          }
          break;

        case 1:
          this.writerNickname = in.readString(this.writerNickname instanceof Utf8 ? (Utf8)this.writerNickname : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.articleTitle = null;
          } else {
            this.articleTitle = in.readString(this.articleTitle instanceof Utf8 ? (Utf8)this.articleTitle : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.text = null;
          } else {
            this.text = in.readString(this.text instanceof Utf8 ? (Utf8)this.text : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










